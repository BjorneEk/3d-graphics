#pragma once

#include "utils.h"
#include "vector.h"
#include "triangle.h"

////////////////////////////////////////////////////////////////////////////
///        @author Gustaf Franz√©n :: https://github.com/BjorneEk;        ///
///                                                                      ///
///     header file for functions used to read and parse a .obj file     ///
////////////////////////////////////////////////////////////////////////////

#define OBJ_MAX_DESCRIPTOR 300

#define OBJ_VECTOR_START     'v'
#define OBJ_VERTEX_START     'v'
#define OBJ_COMMENT          '#'
#define OBJ_DESCRIPTOR_START 'o'
#define OBJ_OBJECT_START     'o'
#define OBJ_INDEX_START      'f'
#define OBJ_TRIANGLE_START   'f'
#define OBJ_FACE_START       'f'



typedef struct OBJ {
	char descriptor[OBJ_MAX_DESCRIPTOR];
	triangle3d_t * tris;
	uint32_t length;
} OBJ_t;

typedef struct obj_face {
	uint32_t p1;
	uint32_t p2;
	uint32_t p3;
	uint32_t p4;
} face_t;

void swap(triangle3d_t *xp, triangle3d_t *yp);
void sort(OBJ_t o);


int32_t indexOf(char * str, char c);

char * trim(char * str);

void get_descriptor(char ** res, char * str);

vec3d_t get_vec3d(char * str);

face_t get_face(char * str);

int read_OBJ(OBJ_t * obj, char * filename);

/**
 *   1.  get size of file;
 *
 *   2.  alocate and fill {char * buff} with the contents of the file;
 *
 *   3.  declare list of vec3d_t {VEC_node_t * vectors} and list of face_t {FACE_node_t * faces};
 *
 *   4.  parse {buff} and add all vectors to {vectors} and add all faces to {faces};
 *
 *   5.  declare array {vec3d_t vectors[length_of_vectors]} and fill it
 *       with the vec3d_t's in {vectors} (for faster indexing when generating triangles);
 *
 *   6.  clear {vectors};
 *
 *
 *   10. fill ressult.tris with the triangles generated by indexing in {vectors} with each
 *       node in faces;
 **/
